import asyncio

import asyncpg
import disnake
from disnake.ext import commands

from app.config import config, logger
from app.core.decorators import target_is_user, remove_bet_from_balance
from app.core.models import User
from app.modals.dossier_modal import DossierModal
from app.services import (
    article_service,
    economy_management_service,
    candy_game_service,
    coin_flip_service,
    coguard_service,
    crystallization_service,
    hole_game_service,
    staring_game_service,
    inventory_service,
    keycard_service,
    leaderboard_service,
    scp_objects_service,
    shop_service,
    work_service,
    achievement_service,
    economy_logging_service,
    achievement_handler_service
)
from app.utils.pagination import pagination_utils
from app.utils.response_utils import response_utils
from app.utils.time_utils import time_utils
from app.utils.ui_utils import ui_utils

bot = commands.InteractionBot(intents=disnake.Intents.all())


@bot.event
async def on_ready():
    try:
        await scp_objects_service.update_scp_objects()
        await shop_service.sync_card_items()
        await achievement_service.sync_achievements()
        await economy_logging_service.init_logging(bot)
    except asyncpg.exceptions.InternalServerError as exception:
        logger.error(exception)
    logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–æ –≤—Ö—ñ–¥ —è–∫ {bot.user}")
    await asyncio.sleep(1)
    await bot.change_presence(
        activity=disnake.Activity(
            type=disnake.ActivityType.watching,
            name="–Ω–∞ –æ—Å–æ–±–æ–≤—ñ —Å–ø—Ä–∞–≤–∏"
        )
    )


@bot.event
async def on_slash_command(interaction):
    user = interaction.user
    command = interaction.data.name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user} –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—É /{command}")


@bot.event
async def on_slash_command_error(interaction, error):
    if isinstance(error, commands.MissingPermissions):
        await response_utils.send_ephemeral_response(interaction, "–¶—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—Å")
        return
    elif isinstance(error, commands.NoPrivateMessage):
        await response_utils.send_ephemeral_response(interaction, "–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª–∏—à–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ")
        return
    elif isinstance(error, disnake.ext.commands.errors.CommandOnCooldown):
        timestamp = await time_utils.get_current()
        timestamp = round(timestamp.timestamp() + error.retry_after)
        await response_utils.send_ephemeral_response(
            interaction,
            f"–í–∏ –ø–æ–∫–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É <t:{timestamp}:R>"
        )

    logger.error(error)


@bot.event
async def on_member_join(member):
    try:
        templates = list(config.cards.values())
        template = templates[-1]

        card = await keycard_service.generate_image(member, template)
        embed = await ui_utils.format_new_user_embed(member.mention, card, template.embed_color)

        await member.guild.system_channel.send(embed=embed)

        await User.get_or_create(user_id=member.id)

    except asyncpg.exceptions.InternalServerError as error:
        logger.error(error)
    except Exception as exception:
        logger.error(exception)


@bot.slash_command(name="–∫–∞—Ä—Ç–∫–∞", description="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ä—Ç–∫—É —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ —Ñ–æ–Ω–¥—É")
@commands.guild_only()
@target_is_user
async def view_card(
        interaction: disnake.ApplicationCommandInteraction,
        user: disnake.User = commands.Param(description="–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", default=None, name="–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"),
):
    await response_utils.wait_for_response(interaction)
    member = user or interaction.user

    try:
        profile_data = await keycard_service.get_user_profile_data(member)

        embed = await ui_utils.format_user_embed(
            card=profile_data.card_image,
            color=profile_data.card_template.embed_color,
            dossier=profile_data.dossier,
            role=profile_data.top_role,
            achievements_count=profile_data.achievements_count
        )

        await response_utils.send_response(interaction, embed=embed)

    except Exception as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)


@commands.cooldown(rate=1, per=config.article_cooldown_time_minutes * 60, type=config.cooldown_type)
@bot.slash_command(name="–≤–∏–ø–∞–¥–∫–æ–≤–∞-—Å—Ç–∞—Ç—Ç—è", description="–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∏–ø–∞–¥–∫–æ–≤—É —Å—Ç–∞—Ç—Ç—é –∑–∞ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏")
@commands.guild_only()
async def get_random_article(
        interaction: disnake.ApplicationCommandInteraction,
        object_class=commands.Param(
            choices=list(config.scp_classes.keys()),
            description="–ö–ª–∞—Å –æ–±'—î–∫—Ç—É (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)",
            default=None, name="–∫–ª–∞—Å"
        ),
        object_range=commands.Param(
            choices=list(config.scp_ranges.keys()),
            description="–î—ñ–∞–ø–∞–∑–æ–Ω –Ω–æ–º–µ—Ä—É –æ–±'—î–∫—Ç—É (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)",
            default=None, name="–¥—ñ–∞–ø–∞–∑–æ–Ω"
        ),
        skip_viewed: bool = commands.Param(
            choices=[True, False],
            description="–í–∏–∫–ª—é—á–∏—Ç–∏ –≤–∂–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ? (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ, —É–≤—ñ–º–∫–Ω–µ–Ω–æ)",
            default=True, name="–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏-–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ"
        )
):
    await response_utils.wait_for_response(interaction)

    try:
        found_all, random_article = await scp_objects_service.get_random_scp_object(
            object_class=config.scp_classes[object_class] if object_class else None,
            object_range=config.scp_ranges[object_range] if object_range else None,
            skip_viewed=skip_viewed,
            member_id=interaction.user.id,
        )

        if found_all:
            await response_utils.send_response(
                interaction, message="–í–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É–ª–∏ –≤—Å—ñ —Å—Ç–∞—Ç—Ç—ñ –∑–∞ —Ü–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏", delete_after=10
            )
        elif random_article:
            image = await article_service.create_article_image(random_article)

            embed, components = await ui_utils.format_article_embed(random_article, image)
            await response_utils.send_response(interaction, embed=embed, components=components)
        else:
            await response_utils.send_response(
                interaction, message="–°—Ç–∞—Ç—Ç—ñ –∑–∞ —Ü–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", delete_after=10
            )

    except asyncpg.exceptions.InternalServerError as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)


@bot.slash_command(name="–¥–æ—Å—å—î", description="–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Å–≤–æ—î –¥–æ—Å—å—î")
@commands.guild_only()
async def view_card(interaction: disnake.ApplicationCommandInteraction):
    try:
        db_user, _ = await User.get_or_create(user_id=interaction.user.id)

        await interaction.response.send_modal(
            modal=DossierModal(user=interaction.user, db_user=db_user)
        )
        await achievement_handler_service.handle_dossier_achievements(interaction.user)
    except asyncpg.exceptions.InternalServerError as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)


@bot.slash_command(name="—Ç–æ–ø", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –ø–µ–≤–Ω–∏–º –∫—Ä–∏—Ç–µ—Ä—ñ—î–º")
@commands.guild_only()
async def top_articles(
        interaction: disnake.ApplicationCommandInteraction,
        criteria=commands.Param(
            choices=list(config.leaderboard_options.keys()),
            description="–ö—Ä–∏—Ç–µ—Ä—ñ–π –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –ª—ñ–¥–µ—Ä—ñ–≤",
            name="–∫—Ä–∏—Ç–µ—Ä—ñ–π"
        ),
):
    await response_utils.wait_for_response(interaction)

    try:
        chosen_criteria = config.leaderboard_options[criteria]
        embed, components = await leaderboard_service.init_leaderboard_message(chosen_criteria)
        await response_utils.send_response(interaction, embed=embed, components=components)

    except Exception as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)


@bot.slash_command(name="–±–∞–ª–∞–Ω—Å", description="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
@commands.guild_only()
@target_is_user
async def view_balance(
        interaction: disnake.ApplicationCommandInteraction,
        user: disnake.User = commands.Param(description="–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", default=None, name="–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"),
):
    await response_utils.wait_for_response(interaction)
    target_user = user or interaction.user

    try:
        embed = await economy_management_service.create_user_balance_message(target_user)
        await response_utils.send_response(interaction, embed=embed)

    except Exception as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)


@bot.slash_command(name="–ø–µ—Ä–µ–∫–∞–∑", description="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–ª–∞—Å–Ω—ñ üí† —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
@commands.guild_only()
async def transfer_balance(
        interaction: disnake.ApplicationCommandInteraction,
        recipient: disnake.User = commands.Param(description="–û–±–µ—Ä—ñ—Ç—å –æ—Ç—Ä–∏–º—É–≤–∞—á–∞", name="–æ—Ç—Ä–∏–º—É–≤–∞—á"),
        amount: int = commands.Param(description="–°—É–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥—É", name="—Å—É–º–∞", ge=100),
):
    await response_utils.wait_for_response(interaction)

    try:
        success, message = await economy_management_service.transfer_balance(
            interaction.user.id, recipient.id, amount
        )
        if success:
            await response_utils.send_response(interaction, message)
        else:
            await response_utils.send_response(interaction, message, delete_after=10)

    except Exception as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)


@bot.slash_command(name="–º–∞–≥–∞–∑–∏–Ω", description="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏ —É –º–∞–≥–∞–∑–∏–Ω—ñ")
@commands.guild_only()
async def shop(interaction: disnake.ApplicationCommandInteraction):
    await response_utils.wait_for_response(interaction)
    try:
        embed, components = await shop_service.init_shop_message()
        await response_utils.send_response(interaction, embed=embed, components=components)

    except Exception as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)


@bot.slash_command(name="–∫—É–ø–∏—Ç–∏", description="–ö—É–ø–∏—Ç–∏ —Ç–æ–≤–∞—Ä –∑ –º–∞–≥–∞–∑–∏–Ω—É –∑–∞ –π–æ–≥–æ ID")
@commands.guild_only()
async def buy_item(
        interaction: disnake.ApplicationCommandInteraction,
        item_id: str = commands.Param(description="ID —Ç–æ–≤–∞—Ä—É", name="–ø—Ä–µ–¥–º–µ—Ç"),
):
    await response_utils.wait_for_ephemeral_response(interaction)

    try:
        await User.get_or_create(user_id=interaction.user.id)

        message = await shop_service.buy_item(
            user_id=interaction.user.id,
            item_id=item_id
        )

        await response_utils.edit_ephemeral_response(interaction, message=message)

    except Exception as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)


@bot.slash_command(name="—ñ–Ω–≤–µ–Ω—Ç–∞—Ä", description="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä")
@commands.guild_only()
async def inventory(interaction: disnake.ApplicationCommandInteraction):
    await response_utils.wait_for_ephemeral_response(interaction)

    try:
        db_user, _ = await User.get_or_create(user_id=interaction.user.id)

        await inventory_service.check_for_default_card(user=db_user)

        embed, components = await inventory_service.init_inventory_message(user=interaction.user)
        await response_utils.edit_ephemeral_response(interaction, embed=embed, components=components)

    except Exception as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)


@bot.slash_command(name="–µ–∫—ñ–ø—ñ—Ä—É–≤–∞—Ç–∏", description="–ï–∫—ñ–ø—ñ—Ä—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É –¥–æ—Å—Ç—É–ø—É –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è")
@commands.guild_only()
async def equip_item(
        interaction: disnake.ApplicationCommandInteraction,
        item_id: str = commands.Param(description="ID –∫–∞—Ä—Ç–∫–∏, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –µ–∫—ñ–ø—ñ—Ä—É–≤–∞—Ç–∏", name="–∫–∞—Ä—Ç–∫–∞"),
):
    await response_utils.wait_for_ephemeral_response(interaction)

    try:
        await User.get_or_create(user_id=interaction.user.id)

        message = await inventory_service.equip_item(
            user_id=interaction.user.id,
            item_id=item_id
        )

        await response_utils.edit_ephemeral_response(interaction, message=message)

    except Exception as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)


@commands.cooldown(rate=1, per=config.work_cooldown_time_minutes * 60, type=config.cooldown_type)
@bot.slash_command(name="—Ä–æ–±–æ—Ç–∞", description="–í–∏–∫–æ–Ω–∞—Ç–∏ –±–µ–∑–ø–µ—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Ñ–æ–Ω–¥—É")
@commands.guild_only()
async def legal_work(interaction: disnake.ApplicationCommandInteraction):
    await response_utils.wait_for_response(interaction)

    try:
        prompt, reward = await work_service.perform_legal_work(user=interaction.user)

        embed = await ui_utils.format_legal_work_embed(
            prompt=prompt,
            reward=reward
        )

        await response_utils.send_response(interaction, embed=embed)

    except Exception as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)


@commands.cooldown(rate=1, per=config.work_cooldown_time_minutes * 60, type=config.cooldown_type)
@bot.slash_command(name="—Ä–∏–∑–∏–∫–æ–≤–∞–Ω–∞-—Ä–æ–±–æ—Ç–∞", description="–í–∑—è—Ç–∏—Å—è –∑–∞ —Ä–∏–∑–∏–∫–æ–≤–∞–Ω—É —Å–ø—Ä–∞–≤—É")
@commands.guild_only()
async def non_legal_work(interaction: disnake.ApplicationCommandInteraction):
    await response_utils.wait_for_response(interaction)

    try:
        prompt, amount, is_success = await work_service.perform_non_legal_work(user=interaction.user)

        embed = await ui_utils.format_non_legal_work_embed(
            prompt=prompt,
            amount=amount,
            is_success=is_success
        )

        await response_utils.send_response(interaction, embed=embed)

    except Exception as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)


@bot.slash_command(name="—Å–∫–∏–Ω—É—Ç–∏-—Ä–µ–ø—É—Ç–∞—Ü—ñ—é", description="–°–∫–∏–Ω—É—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Ä–µ–ø—É—Ç–∞—Ü—ñ—é –≤—Å—ñ—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤")
@commands.guild_only()
@commands.has_permissions(administrator=True)
async def reset_reputation(interaction: disnake.ApplicationCommandInteraction):
    await response_utils.wait_for_response(interaction)

    try:
        await economy_management_service.reset_users_reputation()
        await response_utils.send_response(
            interaction, "–ó–∞–≥–∞–ª—å–Ω–∞ —Ä–µ–ø—É—Ç–∞—Ü—ñ—è –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –±—É–ª–æ —Å–∫–∏–Ω—É—Ç–æ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É"
        )

    except Exception as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)


@bot.slash_command(name="–∑–º—ñ–Ω–∏—Ç–∏-–±–∞–ª–∞–Ω—Å-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", description="–ó–±—ñ–ª—å—à–∏—Ç–∏, –∞–±–æ –∑–º–µ–Ω—à–∏—Ç–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ –ø–µ–≤–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó")
@commands.guild_only()
@commands.has_permissions(administrator=True)
@target_is_user
async def edit_player_balance_reputation(
        interaction: disnake.ApplicationCommandInteraction,
        user: disnake.User = commands.Param(description="–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", name="–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"),
        amount: int = commands.Param(description="–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è, –∞–±–æ –∑–º–µ–Ω—à–µ–Ω–Ω—è", name="–±–∞–ª–∞–Ω—Å"),
):
    await response_utils.wait_for_response(interaction)

    try:
        await economy_management_service.update_user_balance(
            user, amount, (
                f"–ó–º—ñ–Ω–∞ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É\n"
                f"-# –í–∏–∫–ª–∏–∫–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {interaction.user.mention}"
            )
        )

        await response_utils.send_response(
            interaction, f"–ë–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—è {user.mention} –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ"
        )

    except Exception as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)


@commands.cooldown(rate=config.games_cooldown_rate, per=config.games_cooldown_time_minutes * 60, type=config.cooldown_type)
@bot.slash_command(name="–∫—Ä–∏—Å—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è", description="–ü–æ—á–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å –∫—Ä–∏—Å—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó")
@commands.guild_only()
@remove_bet_from_balance
async def game_crystallize(
        interaction: disnake.ApplicationCommandInteraction,
        bet: int = commands.Param(description="–°—É–º–∞ –≤–∞—à–æ—ó —Å—Ç–∞–≤–∫–∏", ge=100, le=10000, name="—Å—Ç–∞–≤–∫–∞"),
):
    try:
        await crystallization_service.start_game(interaction, bet)
    except Exception as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)
        await economy_management_service.update_user_balance(
            interaction.user, bet, f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥—Ä–∏ `{interaction.data.name}`"
        )


@commands.cooldown(rate=config.games_cooldown_rate, per=config.games_cooldown_time_minutes * 60, type=config.cooldown_type)
@bot.slash_command(name="–º–æ–Ω–µ—Ç–∫–∞", description="–ü—ñ–¥–∫–∏–Ω—É—Ç–∏ –º–æ–Ω–µ—Ç–∫—É —Ç–∞ –≤–∏–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–¥–∞—á—É")
@commands.guild_only()
@remove_bet_from_balance
async def game_coin_flip(
        interaction: disnake.ApplicationCommandInteraction,
        bet: int = commands.Param(description="–°—É–º–∞ –≤–∞—à–æ—ó —Å—Ç–∞–≤–∫–∏", ge=100, le=10000, name="—Å—Ç–∞–≤–∫–∞"),
):
    try:
        await coin_flip_service.play_game(interaction, bet)
    except Exception as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)
        await economy_management_service.update_user_balance(
            interaction.user, bet, f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥—Ä–∏ `{interaction.data.name}`"
        )


@commands.cooldown(rate=config.games_cooldown_rate, per=config.games_cooldown_time_minutes * 60, type=config.cooldown_type)
@bot.slash_command(name="—Ü—É–∫–µ—Ä–∫–∏", description="–í–∏–ø—Ä–æ–±—É–π—Ç–µ —Å–≤–æ—é –≤–¥–∞—á—É –∑ SCP-330")
@commands.guild_only()
@remove_bet_from_balance
async def game_candy(
        interaction: disnake.ApplicationCommandInteraction,
        bet: int = commands.Param(description="–°—É–º–∞ –≤–∞—à–æ—ó —Å—Ç–∞–≤–∫–∏", ge=100, le=10000, name="—Å—Ç–∞–≤–∫–∞"),
):
    try:
        await candy_game_service.start_game(interaction, bet)
    except Exception as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)
        await economy_management_service.update_user_balance(
            interaction.user, bet, f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥—Ä–∏ `{interaction.data.name}`"
        )


@commands.cooldown(rate=config.games_cooldown_rate, per=config.games_cooldown_time_minutes * 60, type=config.cooldown_type)
@bot.slash_command(name="–∫–æ–≥–Ω—ñ—Ç–∏–≤–Ω–∞-—Å—Ç—ñ–π–∫—ñ—Å—Ç—å", description="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –∫–æ–≥–Ω—ñ—Ç–∏–≤–Ω—É —Å—Ç—ñ–π–∫—ñ—Å—Ç—å")
@commands.guild_only()
@remove_bet_from_balance
async def game_coguard(
        interaction: disnake.ApplicationCommandInteraction,
        bet: int = commands.Param(description="–°—É–º–∞ –≤–∞—à–æ—ó —Å—Ç–∞–≤–∫–∏", ge=100, le=10000, name="—Å—Ç–∞–≤–∫–∞"),
):
    try:
        await coguard_service.start_game(interaction, bet)
    except Exception as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)
        await economy_management_service.update_user_balance(
            interaction.user, bet, f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥—Ä–∏ `{interaction.data.name}`"
        )


@bot.slash_command(name="–ø—ñ–∂–º—É—Ä–∫–∏", description="–ó—ñ–≥—Ä–∞—Ç–∏ –≤ –ø—ñ–∂–º—É—Ä–∫–∏ –ø—Ä–æ—Ç–∏ —ñ–Ω—à–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –∑ SCP-173")
@commands.guild_only()
@remove_bet_from_balance
async def game_scp173(
        interaction: disnake.ApplicationCommandInteraction,
        bet: int = commands.Param(description="–°—É–º–∞ –≤–∞—à–æ—ó —Å—Ç–∞–≤–∫–∏", ge=100, le=10000, name="—Å—Ç–∞–≤–∫–∞"),
        mode: str = commands.Param(
            description="–†–µ–∂–∏–º –≥—Ä–∏ –¥–ª—è –ª–æ–±–±—ñ",
            choices={
                "–ó–≤–∏—á–∞–π–Ω–∏–π": "normal",
                "–î–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ": "last_man_standing"
            },
            name="—Ä–µ–∂–∏–º-–≥—Ä–∏"
        )
):
    try:
        await staring_game_service.start_lobby(interaction, bet, mode)
    except Exception as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)
        await economy_management_service.update_user_balance(
            interaction.user, bet, f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥—Ä–∏ `{interaction.data.name}`"
        )


@commands.cooldown(rate=config.games_cooldown_rate, per=config.games_cooldown_time_minutes * 60, type=config.cooldown_type)
@bot.slash_command(name="–¥—ñ—Ä–∞", description="–ó—Ä–æ–±—ñ—Ç—å —Å—Ç–∞–≤–∫—É –≤ –∞–Ω–æ–º–∞–ª—å–Ω—ñ–π —Ä—É–ª–µ—Ç—Ü—ñ")
@commands.guild_only()
@remove_bet_from_balance
async def game_hole(
        interaction: disnake.ApplicationCommandInteraction,
        bet: int = commands.Param(description="–°—É–º–∞ –≤–∞—à–æ—ó —Å—Ç–∞–≤–∫–∏", ge=100, le=10000, name="—Å—Ç–∞–≤–∫–∞"),
        group_bet: str = commands.Param(
            description="–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø–æ–≤—É —Å—Ç–∞–≤–∫—É (–Ω–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä–∞–∑–æ–º –∑—ñ —Å—Ç–∞–≤–∫–æ—é –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç)",
            choices=list(config.hole_group_bet_options.keys()),
            default=None,
            name="–≥—Ä—É–ø–∞"
        ),
        item_bet: str = commands.Param(
            description="–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç (–Ω–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑ –≥—Ä—É–ø–æ–≤–æ—é —Å—Ç–∞–≤–∫–æ—é)",
            autocomplete=hole_game_service.item_autocomplete,
            default=None,
            name="–ø—Ä–µ–¥–º–µ—Ç"
        )
):
    if (group_bet and item_bet) or (not group_bet and not item_bet):
        await economy_management_service.update_user_balance(
            interaction.user, bet, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞ –ø—ñ–¥ —á–∞—Å –≥—Ä–∏ {interaction.data.name}"
        )
        await response_utils.send_response(
            interaction, "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –æ–±—Ä–∞—Ç–∏ **–æ–¥–∏–Ω** —Ç–∏–ø —Å—Ç–∞–≤–∫–∏", delete_after=10
        )
        return

    if item_bet and item_bet not in config.hole_items.values():
        await economy_management_service.update_user_balance(
            interaction.user, bet, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞ –ø—ñ–¥ —á–∞—Å –≥—Ä–∏ {interaction.data.name}"
        )
        await response_utils.send_response(
            interaction, f"–û–ø—Ü—ñ—é '{item_bet}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –æ–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É", delete_after=10
        )
        return

    final_choice = group_bet or item_bet

    try:
        if hole_game_service.is_game_active(interaction.channel.id):
            await hole_game_service.join_game(interaction, bet, final_choice)
        else:
            await hole_game_service.create_game(interaction, bet, final_choice)

    except Exception as exception:
        await response_utils.send_error_response(interaction)
        logger.error(exception)
        await economy_management_service.update_user_balance(
            interaction.user, bet, f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥—Ä–∏ `{interaction.data.name}`"
        )


@bot.slash_command(name="–¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è")
@commands.guild_only()
@target_is_user
async def achievements(
        interaction: disnake.ApplicationCommandInteraction,
        user: disnake.User = commands.Param(description="–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", default=None, name="–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"),
):
    await response_utils.wait_for_response(interaction)
    target_user = user or interaction.user

    try:
        embed, components = await achievement_service.init_achievements_message(target_user)
        await response_utils.send_response(interaction, embed=embed, components=components)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω—å: {e}")
        await response_utils.send_response(interaction, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è", delete_after=10)


@bot.slash_command(name="—Å–ø–∏—Å–æ–∫-–¥–æ—Å—è–≥–Ω–µ–Ω—å", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—è–≥–Ω–µ–Ω—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ")
@commands.guild_only()
async def achievement_stats(interaction: disnake.ApplicationCommandInteraction):
    await response_utils.wait_for_ephemeral_response(interaction)

    try:
        embed, components = await achievement_service.init_stats_message()
        await response_utils.edit_ephemeral_response(interaction, embed=embed, components=components)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—è–≥–Ω–µ–Ω—å: {e}")
        await response_utils.edit_ephemeral_response(interaction, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—è–≥–Ω–µ–Ω—å ")


@bot.event
async def on_button_click(interaction: disnake.MessageInteraction) -> None:
    await interaction.response.defer()

    interaction_component_id = interaction.component.custom_id

    if interaction_component_id == "game_scp173_join":
        await staring_game_service.handle_join(interaction)
        return

    if interaction.user != interaction.message.interaction_metadata.user:
        await response_utils.send_ephemeral_response(
            interaction,
            (
                "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º "
                "\n-# –¢—ñ–ª—å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —â–æ –≤–∏–∫–ª–∏–∫–∞–≤ –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ –∑ –Ω–∏–º –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏"
            )
        )
        return

    try:
        if "game" in interaction_component_id:
            if interaction_component_id == "game_crystallize_continue":
                await crystallization_service.continue_game(interaction)
            elif interaction_component_id == "game_crystallize_stop":
                await crystallization_service.cash_out(interaction)
            elif interaction_component_id == "game_candy_take":
                await candy_game_service.take_candy(interaction)
            elif interaction_component_id == "game_candy_leave":
                await candy_game_service.leave_game(interaction)
            elif interaction_component_id == "game_coguard_higher":
                await coguard_service.play_turn(interaction, 'higher')
            elif interaction_component_id == "game_coguard_lower":
                await coguard_service.play_turn(interaction, 'lower')
            elif interaction_component_id == "game_coguard_cashout":
                await coguard_service.cash_out(interaction)
            elif interaction_component_id == "game_scp173_start":
                await staring_game_service.handle_start(interaction)
                return
            return

        current_page = int(interaction.message.components[0].children[2].label)

        if "shop" in interaction_component_id:
            if "previous" in interaction_component_id:
                offset = (current_page - 2) * config.shop_items_per_page
                current_page -= 1
            elif "next" in interaction_component_id:
                offset = current_page * config.shop_items_per_page
                current_page += 1
            elif "last" in interaction_component_id:
                total_count = await shop_service.get_total_items_count()
                offset, current_page = await pagination_utils.get_last_page_offset(
                    total_count=total_count, limit=config.shop_items_per_page
                )
            else:
                current_page = 1
                offset = 0

            embed, components = await shop_service.edit_shop_message(current_page, offset)
            await response_utils.edit_response(interaction, embed=embed, components=components)
            return

        if "inventory" in interaction_component_id:
            user = interaction.user

            if "previous" in interaction_component_id:
                offset = (current_page - 2) * config.inventory_items_per_page
                current_page -= 1
            elif "next" in interaction_component_id:
                offset = current_page * config.inventory_items_per_page
                current_page += 1
            elif "last" in interaction_component_id:
                total_count = await inventory_service.get_total_user_items_count(user.id)
                offset, current_page = await pagination_utils.get_last_page_offset(
                    total_count=total_count, limit=config.inventory_items_per_page
                )
            else:
                current_page = 1
                offset = 0

            embed, components = await inventory_service.edit_inventory_message(
                user, current_page, offset
            )

            await interaction.edit_original_message(embed=embed, components=components)
            return

        if "achievements_stats" in interaction_component_id:
            if "previous" in interaction_component_id:
                offset = (current_page - 2) * config.achievements_per_page
                current_page -= 1
            elif "next" in interaction_component_id:
                offset = current_page * config.achievements_per_page
                current_page += 1
            elif "last" in interaction_component_id:
                total_count = await achievement_service.get_total_achievements_count()
                offset, current_page = await pagination_utils.get_last_page_offset(
                    total_count=total_count, limit=config.achievements_per_page
                )
            else:
                current_page = 1
                offset = 0

            embed, components = await achievement_service.edit_stats_message(current_page, offset)
            await response_utils.edit_ephemeral_response(interaction, embed=embed, components=components)
            return

        if "achievements" in interaction_component_id:
            target_user_id = interaction.message.components[0].children[2].custom_id
            if target_user_id != str(interaction.message.interaction_metadata.user.id):
                target_user = await bot.get_or_fetch_user(int(target_user_id))
            else:
                target_user = interaction.message.interaction_metadata.user

            if "previous" in interaction_component_id:
                offset = (current_page - 2) * config.achievements_per_page
                current_page -= 1
            elif "next" in interaction_component_id:
                offset = current_page * config.achievements_per_page
                current_page += 1
            elif "last" in interaction_component_id:
                total_count = await achievement_service.get_total_user_achievements_count(target_user.id)
                offset, current_page = await pagination_utils.get_last_page_offset(
                    total_count=total_count, limit=config.achievements_per_page
                )
            else:
                current_page = 1
                offset = 0

            embed, components = await achievement_service.edit_achievements_message(
                target_user, current_page, offset
            )
            await interaction.edit_original_message(embed=embed, components=components)
            return

        for criteria in config.leaderboard_options.values():
            if criteria in interaction_component_id:
                if "previous" in interaction_component_id:
                    offset = (current_page - 2) * config.leaderboard_items_per_page
                    current_page -= 1
                elif "next" in interaction_component_id:
                    offset = current_page * config.leaderboard_items_per_page
                    current_page += 1
                elif "last" in interaction_component_id:
                    total_count = await leaderboard_service.get_total_users_count(criteria)
                    offset, current_page = await pagination_utils.get_last_page_offset(
                        total_count=total_count, limit=config.leaderboard_items_per_page
                    )
                else:
                    current_page = 1
                    offset = 0

                embed, components = await leaderboard_service.edit_leaderboard_message(
                    criteria, current_page, offset
                )

                await response_utils.edit_response(interaction, embed=embed, components=components)
                break

    except Exception as exception:
        logger.error(exception)
